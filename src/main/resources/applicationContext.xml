<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 开启注解扫描 -->
    <context:component-scan base-package="com.hxj"/>

    <!-- 引入db.properties -->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>

    <!-- 创建数据源 -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${user}"/>
        <property name="password" value="${password}"/>
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
    </bean>-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
    </bean>


    <!-- 将SqlSessionFactory的创建交给Spring来做，这是Spring和Mybatis整合的一个核心 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="logImpl" value="org.apache.ibatis.logging.log4j.Log4jImpl"/>
                <property name="lazyLoadingEnabled" value="true"/>
            </bean>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:com/hxj/mapper/*Mapper.xml"/>
    </bean>

    <!-- Mybatis可以为Mapper接口创建代理  现在这部分功能交给Spring来做-->
    <bean id="mapperScannerConfigurer"  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.hxj.mapper"/>
    </bean>


    <!-- 事务管理 -->
    <!-- 创建一个事务管理的切面类对象 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启事务注解 -->
    <tx:annotation-driven/>

    <!--
      如果通过配置方式来处理事务：
        事务增强   tx:advice
        切面配置   aop:config   切入点表达式   指定切面类  如何管理
     -->

    <!-- ****************************************SpringMVC的配置*********************************************************** -->

    <!-- mvc的注解驱动 -->
    <mvc:annotation-driven/>

    <!-- 视图解析器 -->
    <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 创建异常处理对象 -->
    <bean class="com.hxj.exception.EmpSysExceptionHandler"/>

    <!-- 静态资源访问 -->
    <mvc:resources mapping="/js/**" location="/js/"/>

</beans>